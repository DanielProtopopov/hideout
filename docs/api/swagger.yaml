definitions:
  api_group_secrets.Secret:
    properties:
      FolderUID:
        example: /
        type: string
      ID:
        example: 1
        type: integer
      IsDynamic:
        example: false
        type: boolean
      Name:
        example: DEBUG
        type: string
      Type:
        example: int
        type: string
      UID:
        example: abc-def-ghi
        type: string
      Value:
        example: Test
        type: string
    type: object
  ordering.Order:
    properties:
      Order:
        example: true
        type: boolean
      OrderBy:
        example: ID
        type: string
    type: object
  pagination.Pagination:
    properties:
      Page:
        type: integer
      PerPage:
        type: integer
    type: object
  rqrs.Error:
    properties:
      Code:
        example: 511
        type: integer
      Description:
        example: Description
        type: string
      Message:
        example: Message
        type: string
    type: object
  secrets.CopyPasteSecretsRQ:
    properties:
      FolderUIDs:
        items:
          type: string
        type: array
      FromFolderUID:
        type: string
      SecretUIDs:
        items:
          type: string
        type: array
      ToFolderUID:
        type: string
    type: object
  secrets.CopyPasteSecretsRS:
    properties:
      Errors:
        items:
          $ref: '#/definitions/rqrs.Error'
        type: array
      Folders:
        items:
          $ref: '#/definitions/secrets.Folder'
        type: array
      Pages:
        example: 14
        type: integer
      PerPage:
        example: 20
        type: integer
      Secrets:
        items:
          $ref: '#/definitions/api_group_secrets.Secret'
        type: array
      Total:
        example: 280
        type: integer
    type: object
  secrets.CreateSecret:
    properties:
      FolderUID:
        example: /
        type: string
      IsDynamic:
        example: false
        type: boolean
      Name:
        example: DEBUG
        type: string
      Type:
        example: int
        type: string
      Value:
        example: Test
        type: string
    type: object
  secrets.CreateSecretsRQ:
    properties:
      Data:
        items:
          $ref: '#/definitions/secrets.CreateSecret'
        type: array
    type: object
  secrets.CreateSecretsRS:
    properties:
      Data:
        items:
          $ref: '#/definitions/api_group_secrets.Secret'
        type: array
      Errors:
        items:
          $ref: '#/definitions/rqrs.Error'
        type: array
      Pages:
        example: 14
        type: integer
      PerPage:
        example: 20
        type: integer
      Total:
        example: 280
        type: integer
    type: object
  secrets.DeleteSecretsRQ:
    properties:
      FolderUIDs:
        items:
          type: string
        type: array
      SecretUIDs:
        items:
          type: string
        type: array
    type: object
  secrets.DeleteSecretsRS:
    properties:
      Errors:
        items:
          $ref: '#/definitions/rqrs.Error'
        type: array
      Pages:
        example: 14
        type: integer
      PerPage:
        example: 20
        type: integer
      Total:
        example: 280
        type: integer
    type: object
  secrets.ExportSecretsRQ:
    properties:
      ArchiveType:
        type: string
      CompressionType:
        type: string
      FolderUID:
        example: abc-def-ghi
        type: string
      Format:
        type: string
      Pagination:
        $ref: '#/definitions/pagination.Pagination'
      SOrder:
        items:
          $ref: '#/definitions/ordering.Order'
        type: array
    type: object
  secrets.Folder:
    properties:
      ID:
        example: 1
        type: integer
      Name:
        example: 'Folder #1'
        type: string
      ParentUID:
        example: abc-def-ghi
        type: string
      UID:
        example: abc-def-ghi
        type: string
    type: object
  secrets.GetSecretsRQ:
    properties:
      FolderUID:
        example: abc-def-ghi
        type: string
      FoldersOrder:
        items:
          $ref: '#/definitions/ordering.Order'
        type: array
      FoldersPagination:
        $ref: '#/definitions/pagination.Pagination'
      SecretsOrder:
        items:
          $ref: '#/definitions/ordering.Order'
        type: array
      SecretsPagination:
        $ref: '#/definitions/pagination.Pagination'
    type: object
  secrets.GetSecretsRS:
    properties:
      Errors:
        items:
          $ref: '#/definitions/rqrs.Error'
        type: array
      Folders:
        items:
          $ref: '#/definitions/secrets.Folder'
        type: array
      Pages:
        example: 14
        type: integer
      PerPage:
        example: 20
        type: integer
      Secrets:
        items:
          $ref: '#/definitions/api_group_secrets.Secret'
        type: array
      Total:
        example: 280
        type: integer
    type: object
  secrets.UpdateSecretsRQ:
    properties:
      Data:
        items:
          $ref: '#/definitions/api_group_secrets.Secret'
        type: array
    type: object
  secrets.UpdateSecretsRS:
    properties:
      Data:
        items:
          $ref: '#/definitions/api_group_secrets.Secret'
        type: array
      Errors:
        items:
          $ref: '#/definitions/rqrs.Error'
        type: array
      Pages:
        example: 14
        type: integer
      PerPage:
        example: 20
        type: integer
      Total:
        example: 280
        type: integer
    type: object
host: api.hideout.local
info:
  contact:
    email: support@hideout.com
    name: API Support
    url: https://www.swagger.io/support
  description: API for working with secrets
  license:
    name: Private
  termsOfService: https://swagger.io/terms/
  title: Hideout API
  version: "1.0"
paths:
  /public/sitemap/:
    get:
      description: Получение sitemap
      operationId: public-get-sitemap
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
        "400":
          description: Bad Request
          schema:
            type: ""
        "404":
          description: Not Found
          schema:
            type: ""
        "500":
          description: Internal Server Error
          schema:
            type: ""
      summary: Получение sitemap
      tags:
      - Общедоступные методы
  /secrets/:
    delete:
      description: Delete secrets
      operationId: delete-secrets
      parameters:
      - description: Secrets delete request
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/secrets.DeleteSecretsRQ'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/secrets.DeleteSecretsRS'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/secrets.DeleteSecretsRS'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/secrets.DeleteSecretsRS'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/secrets.DeleteSecretsRS'
      summary: Delete secrets
      tags:
      - Secrets
    patch:
      description: Update secrets
      operationId: update-secrets
      parameters:
      - description: Secrets update request
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/secrets.UpdateSecretsRQ'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/secrets.UpdateSecretsRS'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/secrets.UpdateSecretsRS'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/secrets.UpdateSecretsRS'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/secrets.UpdateSecretsRS'
      summary: Update secrets
      tags:
      - Secrets
    post:
      description: Getting secrets list
      operationId: list-secrets
      parameters:
      - description: Secrets request
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/secrets.GetSecretsRQ'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/secrets.GetSecretsRS'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/secrets.GetSecretsRS'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/secrets.GetSecretsRS'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/secrets.GetSecretsRS'
      summary: Getting secrets list
      tags:
      - Secrets
    put:
      description: Create secrets
      operationId: create-secrets
      parameters:
      - description: Secrets create request
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/secrets.CreateSecretsRQ'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/secrets.CreateSecretsRS'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/secrets.CreateSecretsRS'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/secrets.CreateSecretsRS'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/secrets.CreateSecretsRS'
      summary: Create secrets
      tags:
      - Secrets
  /secrets/copy-paste/:
    put:
      description: Copy-paste secrets & folders
      operationId: copy-paste-secrets
      parameters:
      - description: Secrets copy-and-paste request
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/secrets.CopyPasteSecretsRQ'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/secrets.CopyPasteSecretsRS'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/secrets.CopyPasteSecretsRS'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/secrets.CopyPasteSecretsRS'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/secrets.CopyPasteSecretsRS'
      summary: Copy-paste secrets & folders
      tags:
      - Secrets
  /secrets/export/:
    post:
      description: Export secrets into various formats
      operationId: export-secrets
      parameters:
      - description: Secrets export request
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/secrets.ExportSecretsRQ'
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Export secrets into various formats
      tags:
      - Secrets
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
